-	script	Damage Test	-1,{
	sc_start SC_ANKLE,200,0;
	if (@DT > gettimetick(2)){
		end;
	}
	getmapxy(@mapname$, @mapx, @mapy, BL_PC, strcharinfo(0));
	
	if(@mapx > 42 && @mapx < 65 && @mapy > 160 && @mapy < 183){
		
		showscript "What would you like to summon?";
		
		switch(select("Demi-Human","Soccer Ball","Warp to DPS area","Cancel")){
			
			if(.monstercount >= 10){
				npctalk "Damage Test: I can only summon 10 monsters at a time.";
				end;
			}
			case 1:
				monster strcharinfo(3),-1,-1,"Demi-Human",31900,1,"Damage Test::OnKilled";
				break;
			case 2:
				monster strcharinfo(3),-1,-1,"Soccerball",1792,1,"Damage Test::OnKilled";
				break;
			case 3:
				warp "pvp_n_5-5",rand(87,112),rand(87,112);
				end;
			case 4:
				end;
				break;
			}
		set .monstercount, .monstercount + 1;
		dispbottom "You can only use this NPC once every 5 seconds to avoid flooding";
		npctalk "Damage Test: "+.monstercount+"/10 monsters summoned";
		@DT = gettimetick(2)+5;
		doevent "Damage Test::OnMobKill";
		end;
	}
	else{
		showscript "You must be inside the 'Damage Test Area'";
		end;
	}
	
	OnKilled:
		set .monstercount, .monstercount - 1;
		end;
	OnInit:
		setmapflag( "prontera",mf_monster_noteleport );
		end;
	OnMobKill:
		sleep 60000;
		killmonsterall "prontera";
		set .monstercount,0;
}

-	script	Damage Test Exit	-1,{
	sc_start SC_ANKLE,200,0;
	showscript "Would you like to exit the DPS Arena?";
	switch(select("Exit Arena","Cancel")){
		case 1:
			warp "prontera",183,253;
			end;
		case 2:
			end;
	}
}

prontera,145,222,5	script	PunchingBag#0	-1,{
	end;
	
OnMyMobDead:
OnInit:
	getunitdata(getnpcid(0), .@d);
	monster strnpcinfo(4),.@d[UNPC_X],.@d[UNPC_Y],"Punching Bag",31900,1,strnpcinfo(0)+"::OnMyMobDead";
	.@dupid = atoi(strnpcinfo(2));
	.gid[.@dupid] = $@mobid[0];
	.mhp[.@dupid] = strmobinfo(4,31900);
	setunitdata .gid[.@dupid],UMOB_MODE,.@d[UMOB_MODE]|0x4000000|0x0200000; // Set MD_STATUS_IMMUNE (0x4000000) because EDP/burn/%MHP based status can skew the DPS counter so much.
	setunitdata .gid[.@dupid],UMOB_RACE,RC_DEMIHUMAN;
	setunitdata .gid[.@dupid],UMOB_LOOKDIR,4;
	
	
	initnpctimer;
	end;
	
OnTimer5000:
	.@dupid = atoi(strnpcinfo(2));
	if(unitexists(.gid[.@dupid])){
		getunitdata(.gid[.@dupid],.@d);
		.@diff = (.mhp[.@dupid] - .@d[UMOB_HP]);
		if(.@diff > 0){
			npctalk "" + .@diff/5 + " Damage per second";
			setunitdata .gid[.@dupid],UMOB_HP,.mhp[.@dupid];
			specialeffect EF_HEAL;
		}
	}
	initnpctimer;
}

prontera,145,229,5	duplicate(PunchingBag#0)	PunchingBag#2	844
prontera,145,236,5	duplicate(PunchingBag#0)	PunchingBag#3	844
//prontera,176,248,5	duplicate(PunchingBag#0)	PunchingBag#4	844
//malaya,273,316,5	duplicate(PunchingBag#0)	PunchingBag#5	844
//malaya,228,316,5	duplicate(PunchingBag#0)	PunchingBag#6	844
//amatsu,130,85,3	duplicate(PunchingBag#0)	PunchingBag#7	844
//thor_camp,99,330,0	duplicate(PunchingBag#0)	PunchingBag#thorcamp	844
//ghouse1,111,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse1_1	844
//ghouse1,116,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse1_2	844
//ghouse1,121,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse1_3	844
//ghouse2,111,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse2_1	844
//ghouse2,116,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse2_2	844
//ghouse2,121,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse2_3	844
//ghouse3,111,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse3_1	844
//ghouse3,116,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse3_2	844
//ghouse3,121,267,0	duplicate(PunchingBag#0)	PunchingBag#ghouse3_3	844

//prontera,141,250,5	duplicate(PunchingBag#0)	PunchingBag#4	844


/*(¯`º¤ø,¸¸,ø¤°¯`º¤ø,¸¸,ø¤°¯`º¤ø,¸¸,ø¤°¯º¤ø,¸¸,ø¤º´¯)
  |                                                 |
  | rAthena Script                                  |
  |                                                 |
  | Guardian Stone & Barricade Repair Test Script   |
  | By:                                             |
  | Viole                                           |
  |                                                 |
  | Current Version                                 |
  | 1.2                                             |
  |                                                 |
  | Description:                                    |
  | Just like the emperium breaker test.            |
  | Here, you can practice repairing                |
  | the guardian stones or the barricades           |
  | and sets a time how long                        |
  | you repair the stone or barricades.             |
  | Got 8 rooms available.                          |
  | ( 4 G.Stone Rooms & 4 Barricade Rooms )         |
  | Summons barricade when control                  |
  | device is repaired succesfully.                 |
  |                                                 |
  | Changelogs:                                     |
  | 1.0 Guardian Stone Repair Test                  |
  | 1.1 Added Barricade Repair Test                 |
  | 1.1 Script Name Changed                         |
  | 1.2 Global Variables changed to NPC Variables   |
  |     to avoid conflicts and server lag           |
  |                                                 |
  | Credits:                                        |
  | -Idea from Emperium Tester by JinBlack          |
  | -Modified guardian stone script (rAthena)       |
  |                                                 |
  | Note:                                           |
  | Edit the map configs under                      |
  | C O N F I G U R A T I O N (line 434)            |
  |                                                 | 
  ´¯`º¤ø,¸¸,ø¤°¯`º¤ø,¸¸,ø¤°¯`º¤ø,¸¸,ø¤°¯º¤ø,¸¸,ø¤º´¯´*/
  
prontera,147,240,5	script	G.Stone/Barricade Test	10962,{

set @own_time, repair_personal_time;
set @own_m,@own_time / 60000;
set @own_ms,@own_time - ( @own_m * 60000);
set @own_s,@own_time / 1000;
set @own_ms,@own_time - ( @own_s * 1000);
set @best_time, $repair_best_time;
set @best_m,@best_time / 60000;
set @best_ms,@best_time - ( @best_m * 60000);
set @best_s,@best_time / 1000;
set @best_ms,@best_time - ( @best_s * 1000);

set @b_own_time, b_repair_personal_time;
set @b_own_m,@b_own_time / 60000;
set @b_own_ms,@b_own_time - ( @b_own_m * 60000);
set @b_own_s,@b_own_time / 1000;
set @b_own_ms,@b_own_time - ( @b_own_s * 1000);
set @b_best_time, $b_repair_best_time;
set @b_best_m,@b_best_time / 60000;
set @b_best_ms,@b_best_time - ( @b_best_m * 60000);
set @b_best_s,@b_best_time / 1000;
set @b_best_ms,@b_best_time - ( @b_best_s * 1000);

Player_Menu:
	mes .n$;
	mes "^008000Guardian Stone Repair Test:^000000";
	if( $playerid )
	{
		mes "- Best Record by : ^0000FF"+$bestplayer$+"^000000";
		mes "- Time : ^0000FF"+@best_m+"m "+@best_s+"s "+@best_ms/10+"ms^000000";
		mes "--------------------------";
		mes "- Your Own Record:";
		mes "- ^000080"+@own_m+"m "+@own_s+"s "+@own_ms/10+"ms ^000000";
		mes " ";
		mes "^008000Barricade Repair Test:^000000";
		mes "- Best Record by : ^0000FF"+$b_bestplayer$+"^000000";
		mes "- Time : ^0000FF"+@b_best_m+"m "+@b_best_s+"s "+@b_best_ms/10+"ms^000000";
		mes "--------------------------";
		mes "- Your Own Record:";
		mes "- ^000080"+@b_own_m+"m "+@b_own_s+"s "+@b_own_ms/10+"ms ^000000";
	}
	else
	{
		mes "- Best Record by : ^0000FF( --- )^000000";
		mes "- Time : ^0000FF( --- )^000000";
		mes "--------------------------";
		mes "- Your Own Record:";
		mes "- ^000080( --- )";
		mes " ";
		mes "^008000Barricade Repair Test:^000000";
		mes "- Best Record by : ^0000FF( --- )^000000";
		mes "- Time : ^0000FF( --- )^000000";
		mes "--------------------------";
		mes "- Your Own Record:";
		mes "- ^000080( --- )";
	}
	next;
	switch( select("^FFA500Proceed^000000:^0000FFLeave^000000",
		( getgmlevel() < .gmlvl )?"":"Admin Configuration"))
	{
	case 1:
		callfunc "subintro";
		switch(select("Repair Guardian Stone/Barricade:Reset Your Record:Leave"))
		{
		case 1:
			next;
			cleararray .arena$[0],"",8;
			mes .n$;
			if (getareausers(.mapname$,.area1x1,.area1y1,.area1x2,.area1y2) || $@playerinside[0] > 0){
				mes "^B8860BG.Stone Repair Room 1:^000000 ^FF0000Busy^000000";
			}else{
				mes "^B8860BG.Stone Repair Room 1:^000000 ^32CD32Free^000000";
				set .arena$[0],"^B8860BG.Stone Repair Room 1^000000";
			}
			if (getareausers(.mapname$,.area2x1,.area2y1,.area2x2,.area2y2) || $@playerinside[1] > 0){
				mes "^B8860BG.Stone Repair Room 2:^000000 ^FF0000Busy^000000";
			}else{
				mes "^B8860BG.Stone Repair Room 2:^000000 ^32CD32Free^000000";
				set .arena$[1],"^B8860BG.Stone Repair Room 2^000000";
			}
			if (getareausers(.mapname$,.area3x1,.area3y1,.area3x2,.area3y2) || $@playerinside[2] > 0){
				mes "^B8860BG.Stone Repair Room 3:^000000 ^FF0000Busy^000000";
			}else{
				mes "^B8860BG.Stone Repair Room 3:^000000 ^32CD32Free^000000";
				set .arena$[2],"^B8860BG.Stone Repair Room 3^000000";
			}
			if (getareausers(.mapname$,.area4x1,.area4y1,.area4x2,.area4y2) || $@playerinside[3] > 0){
				mes "^B8860BG.Stone Repair Room 4:^000000 ^FF0000Busy^000000";
			}else{
				mes "^B8860BG.Stone Repair Room 4:^000000 ^32CD32Free^000000";
				set .arena$[3],"^B8860BG.Stone Repair Room 4^000000";
			}
			if (getareausers(.mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2) || $@playerinside[4] > 0){
				mes "^008000Barricade Repair Room 1:^000000 ^FF0000Busy^000000";
			}else{
				mes "^008000Barricade Repair Room 1:^000000 ^32CD32Free^000000";
				set .arena$[4],"^008000Barricade Repair Room 1^000000";
			}
			if (getareausers(.mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2) || $@playerinside[5] > 0){
				mes "^008000Barricade Repair Room 2:^000000 ^FF0000Busy^000000";
			}else{
				mes "^008000Barricade Repair Room 2:^000000 ^32CD32Free^000000";
				set .arena$[5],"^008000Barricade Repair Room 2^000000";
			}
			if (getareausers(.mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2) || $@playerinside[6] > 0){
				mes "^008000Barricade Repair Room 3:^000000 ^FF0000Busy^000000";
			}else{
				mes "^008000Barricade Repair Room 3:^000000 ^32CD32Free^000000";
				set .arena$[6],"^008000Barricade Repair Room 3^000000";
			}
			if (getareausers(.mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2) || $@playerinside[7] > 0){
				mes "^008000Barricade Repair Room 4:^000000 ^FF0000Busy^000000";
			}else{
				mes "^008000Barricade Repair Room 4:^000000 ^32CD32Free^000000";
				set .arena$[7],"^008000Barricade Repair Room 4^000000";
			}
			next;
			switch (select(.arena$[0],.arena$[1],.arena$[2],.arena$[3],.arena$[4],.arena$[5],.arena$[6],.arena$[7],"^FF0000Exit^000000"))
			{
			case 1:
				if($@playerinside[0] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[0],1;
				set getvariableofnpc(.playerid1,"Repair_Room_A"),getcharid(0);
				set getvariableofnpc(.playername1$,"Repair_Room_A"),strcharinfo(0);
				set getvariableofnpc(.repairtest1,"Repair_Room_A"),0;
				initnpctimer "Repair_Room_A";
				sc_end SC_ALL;
				warp .mapname$,.warpx1,.warpy1;
				end;
			case 2:
				if($@playerinside[1] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[1],1;
				set getvariableofnpc(.playerid2,"Repair_Room_B"),getcharid(0);
				set getvariableofnpc(.playername2$,"Repair_Room_B"),strcharinfo(0);
				set getvariableofnpc(.repairtest2,"Repair_Room_B"),0;
				initnpctimer "Repair_Room_B";
				sc_end SC_ALL;
				warp .mapname$,.warpx2,.warpy2;
				end;
			case 3:
				if($@playerinside[2] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[2],1;
				set getvariableofnpc(.playerid3,"Repair_Room_C"),getcharid(0);
				set getvariableofnpc(.playername3$,"Repair_Room_C"),strcharinfo(0);
				set getvariableofnpc(.repairtest3,"Repair_Room_C"),0;
				initnpctimer "Repair_Room_C";
				sc_end SC_ALL;
				warp .mapname$,.warpx3,.warpy3;
				end;
			case 4:
				if($@playerinside[3] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[3],1;
				set getvariableofnpc(.playerid4,"Repair_Room_D"),getcharid(0);
				set getvariableofnpc(.playername4$,"Repair_Room_D"),strcharinfo(0);
				set getvariableofnpc(.repairtest4,"Repair_Room_D"),0;
				initnpctimer "Repair_Room_D";
				sc_end SC_ALL;
				warp .mapname$,.warpx4,.warpy4;
				end;
			case 5:
				if($@playerinside[4] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[4],1;
				set getvariableofnpc(.playerid5,"B_Repair_Room_A"),getcharid(0);
				set getvariableofnpc(.playername5$,"B_Repair_Room_A"),strcharinfo(0);
				set getvariableofnpc(.repairtest5,"B_Repair_Room_A"),0;
				initnpctimer "B_Repair_Room_A";
				disablenpc "Barricade_1";
				disablenpc "Barricade_2";
				sc_end SC_ALL;
				warp .mapname2$,.2warpx1,.2warpy1;
				end;
			case 6:
				if($@playerinside[5] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[5],1;
				set getvariableofnpc(.playerid6,"B_Repair_Room_B"),getcharid(0);
				set getvariableofnpc(.playername6$,"B_Repair_Room_B"),strcharinfo(0);
				set getvariableofnpc(.repairtest6,"B_Repair_Room_B"),0;
				initnpctimer "B_Repair_Room_B";
				disablenpc "Barricade_3";
				disablenpc "Barricade_4";
				sc_end SC_ALL;
				warp .mapname2$,.2warpx2,.2warpy2;
				end;
			case 7:
				if($@playerinside[6] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[6],1;
				set getvariableofnpc(.playerid7,"B_Repair_Room_C"),getcharid(0);
				set getvariableofnpc(.playername7$,"B_Repair_Room_C"),strcharinfo(0);
				set getvariableofnpc(.repairtest7,"B_Repair_Room_C"),0;
				initnpctimer "B_Repair_Room_C";
				disablenpc "Barricade_5";
				disablenpc "Barricade_6";
				sc_end SC_ALL;
				warp .mapname2$,.2warpx3,.2warpy3;
				end;
			case 8:
				if($@playerinside[7] > 0){ callfunc "roomtaken"; goto Player_Menu; }
				set $@playerinside[7],1;
				set getvariableofnpc(.playerid8,"B_Repair_Room_D"),getcharid(0);
				set getvariableofnpc(.playername8$,"B_Repair_Room_D"),strcharinfo(0);
				set getvariableofnpc(.repairtest8,"B_Repair_Room_D"),0;
				initnpctimer "B_Repair_Room_D";
				disablenpc "Barricade_7";
				disablenpc "Barricade_8";
				sc_end SC_ALL;
				warp .mapname2$,.2warpx4,.2warpy4;
				end;
			case 9:
				close;
			}
		case 2:
			mes .n$;
			mes "Do you want to reset your own record?";
			next;
			switch(select("Reset a Record:Leave"))
			{
			case 1:
				next;
				mes .n$;
				mes "^FF0000Note: If a gm has reset the best record,";
				mes "Your own record will not be removed,";
				mes "just the Server's best record.";
				mes "Unless! You reset your own record.";
				mes "Remember to reset your own records too, to be updated!";
				mes "So let's proceed?";
				switch(select("Reset G.Stone Record:Reset Barricade Record:I've changed my mind!"))
				{
				case 1:
					mes .n$;
					mes "Your personal Records has been reset.";
					set repair_personal_time,0;
					close;
				case 2:
					mes .n$;
					mes "Your personal Records has been reset.";
					set b_repair_personal_time,0;
					close;
				case 3:
					close;
				}
			case 2:
				close;
			}
		case 3:
			close;
		}
	case 2:
		close;
	case 3:
		goto Admin_Menu;
	}
	end;
	
Admin_Menu:
	next;
	mes .n$;
	mes "Welcome back GM ^FF0000"+strcharinfo(0)+"^000000.";
	mes "What do you want to do today?";
	next;
	switch(select("Player Menu:Set Prize:Reset Best Record:Reset Rooms:Just dropping by!"))
	{
	case 1:
		next;
		goto Player_Menu;
	case 2:
		callfunc "subintro";
		switch(select("Set Prize:Enable/Disable Prize:Leave"))
		{
		case 1:
		current_prize:
			next;
			mes .n$;
			mes "Guardian Stone Repair Test:";
			mes "Prize for Best Record Holder : "+$best_amount+"x "+getitemname($best_item)+"s";
			mes "-------------------------";
			mes "Barricade Repair Test:";
			mes "Prize for Best Record Holder : "+$b_best_amount+"x "+getitemname($b_best_item)+"s";
			callfunc "subintro";
			switch(select("Set G.Stone Prize:Set Barricade Prize:Go back to menu"))
			{
			case 1:
				next;
				mes .n$;
				mes "Guardian Stone Repair Test:";
				mes "Ok, please input the item to be given if someone breaks the best Record.";
				next;
				input .@itemid_best;
				if (getitemname(.@itemid_best) == "null" || getitemname(.@itemid_best) == "") {next; mes .n$; mes "This item doesn't exists in the database.."; next; goto current_prize; }
				set $best_item, .@itemid_best;
				next;
				mes .n$;
				mes "How many "+getitemname($best_item)+"s should we give?";
				next;
				input .@itemamt_best;
				if(.@itemamt_best <= 0){next; mes .n$; mes "Please input a # greater than 0!"; next; goto current_prize; }
				set $best_amount, .@itemamt_best;
				next;
				mes "So, the reward for the best record :";
				mes "^008000"+$best_amount+" "+getitemname($best_item)+"s";
				next;
				goto current_prize;
			case 2:
				next;
				mes .n$;
				mes "Barricade Repair Test:";
				mes "Ok, please input the item to be given if someone breaks the best Record.";
				next;
				input .@b_itemid_best;
				if (getitemname(.@b_itemid_best) == "null" || getitemname(.@b_itemid_best) == "") {next; mes .n$; mes "This item doesn't exists in the database.."; next; goto current_prize; }
				set $b_best_item, .@b_itemid_best;
				next;
				mes .n$;
				mes "How many "+getitemname($b_best_item)+"s should we give?";
				next;
				input .@b_itemamt_best;
				if(.@b_itemamt_best <= 0){next; mes .n$; mes "Please input a # greater than 0!"; next; goto current_prize; }
				set $b_best_amount, .@b_itemamt_best;
				next;
				mes "So, the reward for the best record :";
				mes "^008000"+$b_best_amount+" "+getitemname($b_best_item)+"s";
				next;
				goto current_prize;
			case 3:
				goto Admin_Menu;
			}
		case 2:
		enable_disable:
			callfunc "subintro";
			switch(select("Disable Best Record Prize Distribution:Enable Best Record Prize Distribution"))
			{
			case 1:
				next;
				if($give_best_prize == 0){ mes .n$; mes "Best Record Prize Distribution is already disabled!"; next; goto enable_disable; }
				mes .n$;
				mes "Best Record Prize Distribution has been disabled!";
				set $give_best_prize,0;
				goto enable_disable;
			case 2:
				next;
				if($give_best_prize == 1){ mes .n$; mes "Best Record Prize Distribution is already enabled!"; next; goto enable_disable; }
				mes .n$;
				mes "Best Record Prize Distribution has been enabled!";
				set $give_best_prize,1;
				goto enable_disable;
			case 3:
				close;
			}
		case 3:
			close;
		}
	case 3:
		callfunc "subintro";
		if(select("Reset Best Record:Leave") == 1){
		next;
		mes .n$;
		mes "It's done.";
		announce "GM "+strcharinfo(0)+" has reset the Guardian Stone Repair Test`s Best Record! Remember to reset your own records too, to be updated!",0;
		set $repair_best_time,0;
		set $bestplayer$,"";
		set $b_repair_best_time,0;
		set $b_bestplayer$,"";
		goto Admin_Menu;
		}
		close;
	case 4:
		callfunc "subintro";
		if(select("Reset Repair Rooms:Leave") == 1){
		next;
		mes .n$;
		mes "Rooms have been reset.";
		announce "A GM has reset the test repair rooms! Players inside the rooms, please leave now, or will be auto-warped by the npc!",0;
		set $@playerinside[0],0;
		set $@playerinside[1],0;
		set $@playerinside[2],0;
		set $@playerinside[3],0;
		set $@playerinside[4],0;
		set $@playerinside[5],0;
		set $@playerinside[6],0;
		set $@playerinside[7],0;
		stopnpctimer "Repair_Room_A";
		stopnpctimer "Repair_Room_B";
		stopnpctimer "Repair_Room_C";
		stopnpctimer "Repair_Room_D";
		stopnpctimer "B_Repair_Room_A";
		stopnpctimer "B_Repair_Room_B";
		stopnpctimer "B_Repair_Room_C";
		stopnpctimer "B_Repair_Room_D";
		close2;
		mapwarp .mapname$,.maintown$,.mainx,.mainy;
		end;
		}
	case 5:
		close;
	}
	
OnInit:
	//------------------------ C O N F I G U R A T I O N ------------------------//
	
	// NPC NAME
	set .n$, "[ ^FFA500Repair Test NPC^000000 ]";
	
	// GM LEVEL To be able to use the Admin Menu
	set .gmlvl, 70;

	//------------ M A I N T O W N   M A P------------//
	// Your maintown, or where you want to warp the players back
	// after they finished repairing the stone. ( "mapname",x,y )
	set .maintown$, "prontera";
	set .mainx, "182";
	set .mainy, "253";

	//------------ G. S T O N E   R E P A I R   R O O M   M A P------------//
	// The map for the Guardian Stone Repair Test ROOM
	set .mapname$, "quiz_02";
	// The map for the Barricade Repair Test ROOM
	set .mapname2$, "pvp_n_5-5";
	
	//------------ F I R S T   R O O M ------------//
	
	// Guardian Stone 1st Room Spawn Coordinates ( x,y )
	set .warpx1, 264;
	set .warpy1, 350;
	// Barricade 1st Room Spawn Coordinates ( x,y )
	set .2warpx1, 100;
	set .2warpy1, 134;
	
	// Guardian Stone 1st Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .area1x1, 252;
	set .area1y1, 357;
	set .area1x2, 275;
	set .area1y2, 334;
	// Barricade 1st Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .2area1x1, 94;
	set .2area1y1, 139;
	set .2area1x2, 105;
	set .2area1y2, 128;
	
	//------------ S E C O N D   R O O M ------------//
	
	// Guardian Stone 2nd Room Spawn Coordinates ( x,y )
	set .warpx2, 335;
	set .warpy2, 350;
	// Barricade 2nd Room Spawn Coordinates ( x,y )
	set .2warpx2, 99;
	set .2warpy2, 66;
	
	// Guardian Stone 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .area2x1, 324;
	set .area2y1, 357;
	set .area2x2, 347;
	set .area2y2, 334;
	// Barricade 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .2area2x1, 94;
	set .2area2y1, 71;
	set .2area2x2, 105;
	set .2area2y2, 60;
	
	//------------ T H I R D   R O O M ------------//
	
	// Guardian Stone 3rd Room Spawn Coordinates (x,y)
	set .warpx3, 364;
	set .warpy3, 350;
	// Barricade Guardian Stone 3rd Room Spawn Coordinates (x,y)
	set .2warpx3, 66;
	set .2warpy3, 100;
	
	// Guardian Stone 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .area3x1, 352;
	set .area3y1, 357;
	set .area3x2, 375;
	set .area3y2, 334;
	// Barricade Guardian Stone 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .2area3x1, 60;
	set .2area3y1, 105;
	set .2area3x2, 71;
	set .2area3y2, 94;
	
	//------------ F O U R T H   R O O M ------------//
	
	// Guardian Stone 4th Room Spawn Coordinates (x,y)
	set .warpx4, 236;
	set .warpy4, 350;
	// Barricade Guardian Stone 4th Room Spawn Coordinates (x,y)
	set .2warpx4, 133;
	set .2warpy4, 100;
	
	// Guardian Stone 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .area4x1, 224;
	set .area4y1, 357;
	set .area4x2, 247;
	set .area4y2, 334;
	// Barricade Guardian Stone 2nd Room Map AREA Coordinates ( x1,y1,x2,y2 )
	set .2area4x1, 128;
	set .2area4y1, 105;
	set .2area4x2, 139;
	set .2area4y2, 94;
	
	// Don't edit these, if you don't know what you are doing..
	set $@playerinside[0],0;
	set $@playerinside[1],0;
	set $@playerinside[2],0;
	set $@playerinside[3],0;
	set $@playerinside[4],0;
	set $@playerinside[5],0;
	set $@playerinside[6],0;
	set $@playerinside[7],0;
	
	// You can remove this, if you change map location,
	// cause this is my current barricade test room map
	setwall .mapname2$,98,127,4,6,0,"barrwall1";
	setwall .mapname2$,98,72,4,6,0,"barrwall2";
	setwall .mapname2$,72,101,4,4,0,"barrwall3";
	setwall .mapname2$,127,101,4,4,0,"barrwall4";
}

quiz_02,264,346,0	script	Repair_Room_A	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest1 != 0 )
		end;

	stopnpctimer;
	set .playerid1, 0;
	end;

OnTouch:
	if( .playerid1 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[0],0;
		end;
	}
	if( .repairtest1 != 0 )
		end;
	
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area1x1,getvariableofnpc(.area1x1,"G.Stone/Barricade Test");
	set .area1y1,getvariableofnpc(.area1y1,"G.Stone/Barricade Test");
	set .area1x2,getvariableofnpc(.area1x2,"G.Stone/Barricade Test");
	set .area1y2,getvariableofnpc(.area1y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest1, 1;
	sleep 2000;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"Go ahead! Repair the Guardian Stone!!",8;
	set .Test_Init1, gettimetick(0);
	set .repairtest1, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"60 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer60000:
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"30 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer80000:
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"10 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest1, 3;
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,.maintown$,.mainx,.mainy;
	set $@playerinside[0],0;
	set .repairtest1, 0;
	set .playerid1, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest1 != 2 )
		end;

	set .repairtest1, 3;
	sleep 2000;
	areawarp .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,.maintown$,.mainx,.mainy;
	set $@playerinside[0],0;
	set .repairtest1, 0;
	set .playerid1, 0;
	end;
	
}

quiz_02,335,346,0	script	Repair_Room_B	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest2 != 0 )
		end;

	stopnpctimer;
	set .playerid2, 0;
	end;

OnTouch:
	if( .playerid2 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[1],0;
		end;
	}
	if( .repairtest2 != 0 )
		end;
	
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area2x1,getvariableofnpc(.area2x1,"G.Stone/Barricade Test");
	set .area2y1,getvariableofnpc(.area2y1,"G.Stone/Barricade Test");
	set .area2x2,getvariableofnpc(.area2x2,"G.Stone/Barricade Test");
	set .area2y2,getvariableofnpc(.area2y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest2, 1;
	sleep 2000;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"Go ahead! Repair the Guardian Stone!!",8;
	set .Test_Init2, gettimetick(0);
	set .repairtest2, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"60 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer60000:
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"30 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer80000:
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"10 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest2, 3;
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,.maintown$,.mainx,.mainy;
	set $@playerinside[1],0;
	set .repairtest2, 0;
	set .playerid2, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest2 != 2 )
		end;
		
	set .repairtest2, 3;
	sleep 2000;
	areawarp .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,.maintown$,.mainx,.mainy;
	set $@playerinside[1],0;
	set .repairtest2, 0;
	set .playerid2, 0;
	end;
}

quiz_02,364,346,0	script	Repair_Room_C	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest3 != 0 )
		end;

	stopnpctimer;
	set .playerid3, 0;
	end;

OnTouch:
	if( .playerid3 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[2],0;
		end;
	}
	if( .repairtest3 != 0 )
		end;

	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area3x1,getvariableofnpc(.area3x1,"G.Stone/Barricade Test");
	set .area3y1,getvariableofnpc(.area3y1,"G.Stone/Barricade Test");
	set .area3x2,getvariableofnpc(.area3x2,"G.Stone/Barricade Test");
	set .area3y2,getvariableofnpc(.area3y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest3, 1;
	sleep 2000;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"Go ahead! Repair the Guardian Stone!!",8;
	set .Test_Init3, gettimetick(0);
	set .repairtest3, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"60 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer60000:
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"30 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer80000:
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"10 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest3, 3;
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,.maintown$,.mainx,.mainy;
	set $@playerinside[2],0;
	set .repairtest3, 0;
	set .playerid3, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest3 != 2 )
		end;

	set .repairtest3, 3;
	sleep 2000;
	areawarp .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,.maintown$,.mainx,.mainy;
	set $@playerinside[2],0;
	set .repairtest3, 0;
	set .playerid3, 0;
	end;
}

quiz_02,236,346,0	script	Repair_Room_D	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest4 != 0 )
		end;

	stopnpctimer;
	set .playerid4, 0;
	end;

OnTouch:
	if( .playerid4 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[3],0;
		end;
	}
	if( .repairtest4 != 0 )
		end;

	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area4x1,getvariableofnpc(.area4x1,"G.Stone/Barricade Test");
	set .area4y1,getvariableofnpc(.area4y1,"G.Stone/Barricade Test");
	set .area4x2,getvariableofnpc(.area4x2,"G.Stone/Barricade Test");
	set .area4y2,getvariableofnpc(.area4y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest4, 1;
	sleep 2000;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"Go ahead! Repair the Guardian Stone!!",8;
	set .Test_Init4, gettimetick(0);
	set .repairtest4, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"60 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer60000:
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"30 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer80000:
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"10 seconds remaining to repair the Guardian Stone...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest4, 3;
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,.maintown$,.mainx,.mainy;
	set $@playerinside[3],0;
	set .repairtest4, 0;
	set .playerid4, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest4 != 2 )
		end;

	set .repairtest4, 3;
	sleep 2000;
	areawarp .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,.maintown$,.mainx,.mainy;
	set $@playerinside[3],0;
	set .repairtest4, 0;
	set .playerid4, 0;
	end;
}

pvp_n_5-5,99,133,0	script	B_Repair_Room_A	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest5 != 0 )
		end;

	stopnpctimer;
	set .playerid5, 0;
	end;

OnTouch:
	if( .playerid5 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[4],0;
		end;
	}
	if( .repairtest5 != 0 )
		end;

	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area1x1,getvariableofnpc(.2area1x1,"G.Stone/Barricade Test");
	set .2area1y1,getvariableofnpc(.2area1y1,"G.Stone/Barricade Test");
	set .2area1x2,getvariableofnpc(.2area1x2,"G.Stone/Barricade Test");
	set .2area1y2,getvariableofnpc(.2area1y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest5, 1;
	sleep 2000;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"Go ahead! Repair the Barricade!!",8;
	set .Test_Init5, gettimetick(0);
	set .repairtest5, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"60 seconds remaining to repair the Barricade...",8;
	end;

OnTimer60000:
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"30 seconds remaining to repair the Barricade...",8;
	end;

OnTimer80000:
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"10 seconds remaining to repair the Barricade...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest5, 3;
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,.maintown$,.mainx,.mainy;
	set $@playerinside[4],0;
	set .repairtest5, 0;
	set .playerid5, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest5 != 2 )
		end;

	set .repairtest5, 3;
	sleep 2000;
	areawarp .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,.maintown$,.mainx,.mainy;
	set $@playerinside[4],0;
	set .repairtest5, 0;
	set .playerid5, 0;
	end;

}

pvp_n_5-5,99,65,0	script	B_Repair_Room_B	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest6 != 0 )
		end;

	stopnpctimer;
	set .playerid6, 0;
	end;

OnTouch:
	if( .playerid6 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[5],0;
		end;
	}
	if( .repairtest6 != 0 )
		end;

	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area2x1,getvariableofnpc(.2area2x1,"G.Stone/Barricade Test");
	set .2area2y1,getvariableofnpc(.2area2y1,"G.Stone/Barricade Test");
	set .2area2x2,getvariableofnpc(.2area2x2,"G.Stone/Barricade Test");
	set .2area2y2,getvariableofnpc(.2area2y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest6, 1;
	sleep 2000;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"Go ahead! Repair the Barricade!!",8;
	set .Test_Init6, gettimetick(0);
	set .repairtest6, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"60 seconds remaining to repair the Barricade...",8;
	end;

OnTimer60000:
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"30 seconds remaining to repair the Barricade...",8;
	end;

OnTimer80000:
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"10 seconds remaining to repair the Barricade...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest6, 3;
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,.maintown$,.mainx,.mainy;
	set $@playerinside[5],0;
	set .repairtest6, 0;
	set .playerid6, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest6 != 2 )
		end;

	set .repairtest6, 3;
	sleep 2000;
	areawarp .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,.maintown$,.mainx,.mainy;
	set $@playerinside[5],0;
	set .repairtest6, 0;
	set .playerid6, 0;
	end;
	
}

pvp_n_5-5,66,100,0	script	B_Repair_Room_C	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest7 != 0 )
		end;

	stopnpctimer;
	set .playerid7, 0;
	end;

OnTouch:
	if( .playerid7 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[6],0;
		end;
	}
	if( .repairtest7 != 0 )
		end;

	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area3x1,getvariableofnpc(.2area3x1,"G.Stone/Barricade Test");
	set .2area3y1,getvariableofnpc(.2area3y1,"G.Stone/Barricade Test");
	set .2area3x2,getvariableofnpc(.2area3x2,"G.Stone/Barricade Test");
	set .2area3y2,getvariableofnpc(.2area3y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest7, 1;
	sleep 2000;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"Go ahead! Repair the Barricade!!",8;
	set .Test_Init7, gettimetick(0);
	set .repairtest7, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"60 seconds remaining to repair the Barricade...",8;
	end;

OnTimer60000:
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"30 seconds remaining to repair the Barricade...",8;
	end;

OnTimer80000:
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"10 seconds remaining to repair the Barricade...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest7, 3;
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,.maintown$,.mainx,.mainy;
	set $@playerinside[6],0;
	set .repairtest7, 0;
	set .playerid7, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest7 != 2 )
		end;

	set .repairtest7, 3;
	sleep 2000;
	areawarp .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,.maintown$,.mainx,.mainy;
	set $@playerinside[6],0;
	set .repairtest7, 0;
	set .playerid7, 0;
	end;
	
}

pvp_n_5-5,132,100,0	script	B_Repair_Room_D	-1,13,13,{
	end;

OnTimer10000:
	if( .repairtest8 != 0 )
		end;

	stopnpctimer;
	set .playerid8, 0;
	end;

OnTouch:
	if( .playerid8 != getcharid(0) )
	{
		warp "SavePoint",0,0;
		set $@playerinside[7],0;
		end;
	}
	if( .repairtest8 != 0 )
		end;

	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area4x1,getvariableofnpc(.2area4x1,"G.Stone/Barricade Test");
	set .2area4y1,getvariableofnpc(.2area4y1,"G.Stone/Barricade Test");
	set .2area4x2,getvariableofnpc(.2area4x2,"G.Stone/Barricade Test");
	set .2area4y2,getvariableofnpc(.2area4y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .repairtest8, 1;
	sleep 2000;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"Get ready! The test will start in 5 seconds.",8;
	sleep 2000;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"3 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"2 seconds...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"1 second...",8;
	sleep 1000;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"Go ahead! Repair the Barricade!!",8;
	set .Test_Init8, gettimetick(0);
	set .repairtest8, 2;
	initnpctimer;
	end;

OnTimer30000:
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"60 seconds remaining to repair the Barricade...",8;
	end;

OnTimer60000:
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"30 seconds remaining to repair the Barricade...",8;
	end;

OnTimer80000:
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"10 seconds remaining to repair the Barricade...",8;
	end;

OnTimer90000:
	stopnpctimer;
	set .repairtest8, 3;
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"Time Out! Fail test!!",8;
	sleep 2000;
	areawarp .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,.maintown$,.mainx,.mainy;
	set $@playerinside[7],0;
	set .repairtest8, 0;
	set .playerid8, 0;
	end;

OnRepairDone:
	stopnpctimer;
	if( .repairtest8 != 2 )
		end;

	set .repairtest8, 3;
	sleep 2000;
	areawarp .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,.maintown$,.mainx,.mainy;
	set $@playerinside[7],0;
	set .repairtest8, 0;
	set .playerid8, 0;
	end;
	
}

quiz_02,264,346,4	script	Guardian Stone#1::Repair_Stone_A	1908,{
	if( getvariableofnpc(.repairtest1,"Repair_Room_A") != 2 )
		end;
	if( getvariableofnpc(.playerid1,"Repair_Room_A") != getcharid(0) )
		end;
		
			callfunc "stone_repair";
			goto repair_test_done;
				
repair_test_done:
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area1x1,getvariableofnpc(.area1x1,"G.Stone/Barricade Test");
	set .area1y1,getvariableofnpc(.area1y1,"G.Stone/Barricade Test");
	set .area1x2,getvariableofnpc(.area1x2,"G.Stone/Barricade Test");
	set .area1y2,getvariableofnpc(.area1y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .playerid1,getcharid(0);
	set .playername1$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"Repair_Room_A");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < repair_personal_time || repair_personal_time == 0)
	{
		set repair_personal_time, .new_time;
		areaannounce .mapname$,.area1x1,.area1y1,.area1x2,.area1y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $repair_best_time || $repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $best_item,$best_amount;
		}
		set $repair_best_time, .new_time;
		set $bestplayer$, .playername1$;
		set $playerid, .playerid1;
		announce ""+$bestplayer$+" is now the new No. 1 Guardian Stone Smith!!",bc_all;
	}
	donpcevent "Repair_Room_A::OnRepairDone";
	end;
}

quiz_02,335,346,4	script	Guardian Stone#2::Repair_Stone_B	1908,{
	if( getvariableofnpc(.repairtest2,"Repair_Room_B") != 2 )
		end;
	if( getvariableofnpc(.playerid2,"Repair_Room_B") != getcharid(0) )
		end;
		
			callfunc "stone_repair";
			goto repair_test_done;
	
repair_test_done:
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area2x1,getvariableofnpc(.area2x1,"G.Stone/Barricade Test");
	set .area2y1,getvariableofnpc(.area2y1,"G.Stone/Barricade Test");
	set .area2x2,getvariableofnpc(.area2x2,"G.Stone/Barricade Test");
	set .area2y2,getvariableofnpc(.area2y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .playerid2,getcharid(0);
	set .playername2$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"Repair_Room_B");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < repair_personal_time || repair_personal_time == 0)
	{
		set repair_personal_time, .new_time;
		areaannounce .mapname$,.area2x1,.area2y1,.area2x2,.area2y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $repair_best_time || $repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $best_item,$best_amount;
		}
		set $repair_best_time, .new_time;
		set $bestplayer$, .playername2$;
		set $playerid, .playerid2;
		announce ""+$bestplayer$+" is now the new No. 1 Guardian Stone Smith!!",bc_all;
	}
	donpcevent "Repair_Room_B::OnRepairDone";
	end;
}

quiz_02,364,346,4	script	Guardian Stone#3::Repair_Stone_C	1908,{
	if( getvariableofnpc(.repairtest3,"Repair_Room_C") != 2 )
		end;
	if( getvariableofnpc(.playerid3,"Repair_Room_C") != getcharid(0) )
		end;

		callfunc "stone_repair";
		goto repair_test_done;
	
repair_test_done:
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area3x1,getvariableofnpc(.area3x1,"G.Stone/Barricade Test");
	set .area3y1,getvariableofnpc(.area3y1,"G.Stone/Barricade Test");
	set .area3x2,getvariableofnpc(.area3x2,"G.Stone/Barricade Test");
	set .area3y2,getvariableofnpc(.area3y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .playerid3,getcharid(0);
	set .playername3$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"Repair_Room_C");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < repair_personal_time || repair_personal_time == 0)
	{
		set repair_personal_time, .new_time;
		areaannounce .mapname$,.area3x1,.area3y1,.area3x2,.area3y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $repair_best_time || $repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $best_item,$best_amount;
		}
		set $repair_best_time, .new_time;
		set $bestplayer$, .playername3$;
		set $playerid, .playerid3;
		announce ""+$bestplayer$+" is now the new No. 1 Guardian Stone Smith!!",bc_all;
	}
	donpcevent "Repair_Room_C::OnRepairDone";
	end;
}

quiz_02,236,346,4	script	Guardian Stone#4::Repair_Stone_D	1908,{
	if( getvariableofnpc(.repairtest4,"Repair_Room_D") != 2 )
		end;
	if( getvariableofnpc(.playerid4,"Repair_Room_D") != getcharid(0) )
		end;

		callfunc "stone_repair";
		goto repair_test_done;
	
repair_test_done:
	set .mapname$,getvariableofnpc(.mapname$,"G.Stone/Barricade Test");
	set .area4x1,getvariableofnpc(.area4x1,"G.Stone/Barricade Test");
	set .area4y1,getvariableofnpc(.area4y1,"G.Stone/Barricade Test");
	set .area4x2,getvariableofnpc(.area4x2,"G.Stone/Barricade Test");
	set .area4y2,getvariableofnpc(.area4y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	set .playerid4,getcharid(0);
	set .playername4$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"Repair_Room_D");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < repair_personal_time || repair_personal_time == 0)
	{
		set repair_personal_time, .new_time;
		areaannounce .mapname$,.area4x1,.area4y1,.area4x2,.area4y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $repair_best_time || $repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $best_item,$best_amount;
		}
		set $repair_best_time, .new_time;
		set $bestplayer$, .playername4$;
		set $playerid, .playerid4;
		announce ""+$bestplayer$+" is now the new No. 1 Guardian Stone Smith!!",bc_all;
	}
	donpcevent "Repair_Room_D::OnRepairDone";
	end;
}

pvp_n_5-5,100,134,4	script	Control Device#1::Repair_Barricade_A	444,{
	if( getvariableofnpc(.repairtest5,"B_Repair_Room_A") != 2 )
		end;
	if( getvariableofnpc(.playerid5,"B_Repair_Room_A") != getcharid(0) )
		end;
		
			callfunc "barricade_repair";
			goto repair_test_done;
				
repair_test_done:
	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area1x1,getvariableofnpc(.2area1x1,"G.Stone/Barricade Test");
	set .2area1y1,getvariableofnpc(.2area1y1,"G.Stone/Barricade Test");
	set .2area1x2,getvariableofnpc(.2area1x2,"G.Stone/Barricade Test");
	set .2area1y2,getvariableofnpc(.2area1y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	enablenpc "Barricade_1";
	enablenpc "Barricade_2";
	set .playerid5,getcharid(0);
	set .playername5$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"B_Repair_Room_A");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < b_repair_personal_time || b_repair_personal_time == 0)
	{
		set b_repair_personal_time, .new_time;
		areaannounce .mapname2$,.2area1x1,.2area1y1,.2area1x2,.2area1y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $b_repair_best_time || $b_repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $b_best_item,$b_best_amount;
		}
		set $b_repair_best_time, .new_time;
		set $b_bestplayer$, .playername5$;
		set $playerid, .playerid5;
		announce ""+$b_bestplayer$+" is now the new No. 1 Barricade Smith!!",bc_all;
	}
	donpcevent "B_Repair_Room_A::OnRepairDone";
	end;
}

pvp_n_5-5,99,64,4	script	Control Device#2::Repair_Barricade_B	444,{
	if( getvariableofnpc(.repairtest6,"B_Repair_Room_B") != 2 )
		end;
	if( getvariableofnpc(.playerid6,"B_Repair_Room_B") != getcharid(0) )
		end;
		
			callfunc "barricade_repair";
			goto repair_test_done;
				
repair_test_done:
	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area2x1,getvariableofnpc(.2area2x1,"G.Stone/Barricade Test");
	set .2area2y1,getvariableofnpc(.2area2y1,"G.Stone/Barricade Test");
	set .2area2x2,getvariableofnpc(.2area2x2,"G.Stone/Barricade Test");
	set .2area2y2,getvariableofnpc(.2area2y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	enablenpc "Barricade_3";
	enablenpc "Barricade_4";
	set .playerid6,getcharid(0);
	set .playername6$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"B_Repair_Room_B");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < b_repair_personal_time || b_repair_personal_time == 0)
	{
		set b_repair_personal_time, .new_time;
		areaannounce .mapname2$,.2area2x1,.2area2y1,.2area2x2,.2area2y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $b_repair_best_time || $b_repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $b_best_item,$b_best_amount;
		}
		set $b_repair_best_time, .new_time;
		set $b_bestplayer$, .playername6$;
		set $playerid, .playerid6;
		announce ""+$b_bestplayer$+" is now the new No. 1 Barricade Smith!!",bc_all;
	}
	donpcevent "B_Repair_Room_B::OnRepairDone";
	end;
}

pvp_n_5-5,64,100,4	script	Control Device#3::Repair_Barricade_C	444,{
	if( getvariableofnpc(.repairtest7,"B_Repair_Room_C") != 2 )
		end;
	if( getvariableofnpc(.playerid7,"B_Repair_Room_C") != getcharid(0) )
		end;
		
			callfunc "barricade_repair";
			goto repair_test_done;
				
repair_test_done:
	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area3x1,getvariableofnpc(.2area3x1,"G.Stone/Barricade Test");
	set .2area3y1,getvariableofnpc(.2area3y1,"G.Stone/Barricade Test");
	set .2area3x2,getvariableofnpc(.2area3x2,"G.Stone/Barricade Test");
	set .2area3y2,getvariableofnpc(.2area3y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	enablenpc "Barricade_5";
	enablenpc "Barricade_6";
	set .playerid7,getcharid(0);
	set .playername7$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"B_Repair_Room_C");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < b_repair_personal_time || b_repair_personal_time == 0)
	{
		set b_repair_personal_time, .new_time;
		areaannounce .mapname2$,.2area3x1,.2area3y1,.2area3x2,.2area3y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $b_repair_best_time || $b_repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $b_best_item,$b_best_amount;
		}
		set $b_repair_best_time, .new_time;
		set $b_bestplayer$, .playername7$;
		set $playerid, .playerid7;
		announce ""+$b_bestplayer$+" is now the new No. 1 Barricade Smith!!",bc_all;
	}
	donpcevent "B_Repair_Room_C::OnRepairDone";
	end;
}

pvp_n_5-5,134,100,4	script	Control Device#4::Repair_Barricade_D	444,{
	if( getvariableofnpc(.repairtest8,"B_Repair_Room_D") != 2 )
		end;
	if( getvariableofnpc(.playerid8,"B_Repair_Room_D") != getcharid(0) )
		end;
		
			callfunc "barricade_repair";
			goto repair_test_done;
				
repair_test_done:
	set .mapname2$,getvariableofnpc(.mapname2$,"G.Stone/Barricade Test");
	set .2area4x1,getvariableofnpc(.2area4x1,"G.Stone/Barricade Test");
	set .2area4y1,getvariableofnpc(.2area4y1,"G.Stone/Barricade Test");
	set .2area4x2,getvariableofnpc(.2area4x2,"G.Stone/Barricade Test");
	set .2area4y2,getvariableofnpc(.2area4y2,"G.Stone/Barricade Test");
	set .maintown$,getvariableofnpc(.maintown$,"G.Stone/Barricade Test");
	set .mainx,getvariableofnpc(.mainx,"G.Stone/Barricade Test");
	set .mainy,getvariableofnpc(.mainy,"G.Stone/Barricade Test");
	enablenpc "Barricade_7";
	enablenpc "Barricade_8";
	set .playerid8,getcharid(0);
	set .playername8$,strcharinfo(0);
	set .cur_time, getnpctimer(0,"B_Repair_Room_D");
	set .new_time, .cur_time - 7000;
	set .m, .new_time / 60000;
    set .ms, .new_time - (.m * 60000);
    set .s, .new_time /1000;
    set .ms, .new_time - (.s * 1000);
	areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"Test completed in "+.m+"m "+.s+"s "+.ms/10+"ms !!",8;
	if (.new_time < b_repair_personal_time || b_repair_personal_time == 0)
	{
		set b_repair_personal_time, .new_time;
		areaannounce .mapname2$,.2area4x1,.2area4y1,.2area4x2,.2area4y2,"New Own Record!!!",bc_area;
	}
	if( .new_time < $b_repair_best_time || $b_repair_best_time == 0 )
	{
		if($give_best_prize == 1){
			getitem $b_best_item,$b_best_amount;
		}
		set $b_repair_best_time, .new_time;
		set $b_bestplayer$, .playername8$;
		set $playerid, .playerid8;
		announce ""+$b_bestplayer$+" is now the new No. 1 Barricade Smith!!",bc_all;
	}
	donpcevent "B_Repair_Room_D::OnRepairDone";
	end;
}

function	script	roomtaken	{
	mes "^00B2EE[ Repair Test NPC ]^000000";
	mes "Sorry but the Room has been taken.";
	mes "Please try another Room or come back later.";
	return;
}

function	script	subintro	{
	next;
	mes "^00B2EE[ Repair Test NPC ]^000000";
	mes "What would you like to do?";
	next;
	return;
}

function	script	stone_repair	{
	mes "^3355FFYou will need the";
	mes "following materials to";
	mes "rebuild a destroyed";
	mes "Guardian Stone.^000000";
	next;
	mes "1 Oridecon";
	mes "1 Elunium";
	mes "30 Stones";
	mes "5 Blue Gemstones";
	mes "5 Yellow Gemstones";
	mes "5 Red Gemstones";
	next;
	mes "^3355FFDo you want to continue?^000000";
	switch( select("No:Continue") )
	{
		case 1:
			mes "^3355FFWork canceled.^000000";
			close;
		case 2:
			if ((countitem(984) > 0) && (countitem(985) > 0) && (countitem(7049) > 29) && (countitem(717) > 4) && (countitem(715) > 4) && (countitem(716) > 4)) {
			next;
			mes "^3355FFArrange Stones, Elunium, and";
			mes "Oridecon, in that order, in the";
			mes "center. Then you must arrange";
			mes "the enchanted Gemstones to";
			mes "rebuild the Guardian Stone.^000000";
			next;
			switch( select("Elunium:Oridecon:Stone") )
			{
				case 1:
					mes "^3355FFElunium has been";
					mes "placed in the center.^000000";
					next;
					break;
				case 2:
					mes "^3355FFOridecon has been";
					mes "placed in the center.^000000";
					next;
					break;
				case 3:
					mes "^3355FFStones have been";
					mes "placed in the center.^000000";
					set .@nice,.@nice + 10;
					next;
					break;
			}
			switch( select("Elunium:Oridecon:Stone") )
			{
				case 1:
					mes "^3355FFYou have lined the";
					mes "outside of the center";
					mes "with some Elunium.^000000";
					set .@nice,.@nice + 10;
					next;
					break;
				case 2:
					mes "^3355FFYou have lined the";
					mes "outside of the center";
					mes "with some Oridecon.^000000";
					next;
					break;
				case 3:
					mes "^3355FFYou have lined the";
					mes "outside of the center";
					mes "with some Stones.^000000";
					next;
					break;
			}
			switch( select("Elunium:Oridecon:Stone") )
			{
				case 1:
					mes "^3355FFYou covered the";
					mes "rest of the materials";
					mes "with some Elunium.^000000";
					next;
					break;
				case 2:
					mes "^3355FFYou covered the";
					mes "rest of the materials";
					mes "with some Oridecon.^000000";
					set .@nice,.@nice + 10;
					next;
					break;
				case 3:
					mes "^3355FFYou covered the";
					mes "rest of the materials";
					mes "with some Stones.^000000";
					next;
					break;
			}
			mes "^3355FFNow you need to arrange";
			mes "the enchanted Gemstones";
			mes "accordingly. You can identify";
			mes "their Magic properties by";
			mes "their casting effect.^000000";
			next;
			while( 1 )
			{
				if( .@roof0 > 7 )
				{
					break;
				}
				else
				{
					switch( rand(1,3) )
					{
						case 1:
							specialeffect EF_BEGINSPELL2;
							mes "^3355FFThe Gemstones must";
							mes "be arranged in the correct";
							mes "order according to their";
							mes "magic properties and power.^000000";
							next;
							switch( select("Red Gemstone:Yellow Gemstone:Blue Gemstone") )
							{
								case 1:
									mes "^3355FFYou placed the Red Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
								case 2:
									mes "^3355FFYou placed the Yellow Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
								case 3:
									mes "^3355FFYou placed the Blue Gemstone.^000000";
									set .@nice,.@nice + 10;
									set .@roof0,.@roof0 + 1;
									specialeffect EF_STEAL;
									next;
									break;
							}
							break;
						case 2:
							specialeffect EF_VOLCANO;
							mes "^3355FFThe Gemstones must";
							mes "be arranged in the correct";
							mes "order according to their";
							mes "magic properties and power.^000000";
							next;
							switch(select("Red Gemstone:Yellow Gemstone:Blue Gemstone"))
							{
								case 1:
									mes "^3355FFYou placed the Red Gemstone.^000000";
									set .@nice,.@nice + 10;
									set .@roof0,.@roof0 + 1;
									specialeffect EF_STEAL;
									next;
									break;
								case 2:
									mes "^3355FFYou placed the Yellow Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
								case 3:
									mes "^3355FFYou placed the Blue Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
							}
							break;
						case 3:
							specialeffect EF_BEGINSPELL4;
							mes "^3355FFThe Gemstones must";
							mes "be arranged in the correct";
							mes "order according to their";
							mes "magic properties and power.^000000";
							next;
							switch( select("Red Gemstone:Yellow Gemstone:Blue Gemstone") )
							{
								case 1:
									mes "^3355FFYou placed the Red Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
								case 2:
									mes "^3355FFYou placed the Yellow Gemstone.^000000";
									set .@nice,.@nice + 10;
									set .@roof0,.@roof0 + 1;
									specialeffect EF_STEAL;
									next;
									break;
								case 3:
									mes "^3355FFYou placed the Blue Gemstone.";
									mes "However, the Guardian Stone";
									mes "Repair System failed because";
									mes "of a magic power conflict.^000000";
									close;
							}
					}
				}
			}
			if( .@nice > 90 )
			{
				mes "^3355FFThe Gemstones have been";
				mes "arranged, and the Guardian";
				mes "Stone is successfully repaired.^000000";
				//delitem 984,1; //Oridecon
				//delitem 985,1; //Elunium
				//delitem 7049,30; //Stone
				//delitem 717,5; //Blue_Gemstone
				//delitem 715,5; //Yellow_Gemstone
				//delitem 716,5; //Red_Gemstone
				close2;
				specialeffect EF_ICECRASH;
				return;
			}
			else
			{
				mes "^3355FFAfter all of that work...";
				mes "It looks like you failed";
				mes "to fix the Guardian Stone";
				mes "and lost some materials.^000000";
				//delitem 7049,10; //Stone
				//delitem 717,2; //Blue_Gemstone
				//delitem 715,2; //Yellow_Gemstone
				//delitem 716,2; //Red_Gemstone
				close;
			}
		}
		else {
		next;
		mes "^3355FFYou don't have enough";
		mes "materials to repair";
		mes "the Guardian Stone.^000000";
		close;
		}
	}
	end;
	return;
}

function	script	barricade_repair	{
	mes "^3355FFDemolished Fortress";
	mes "Gates can be repaired,";
	mes "but you will need to gather";
	mes "the following materials.^000000";
	next;
	mes "^4D4DFF10 Steel^000000,";
	mes "^4D4DFF30 Trunks^000000,";
	mes "^4D4DFF5 Oridecon^000000, and";
	mes "^4D4DFF10 Emveretarcon^000000.";
	next;
	select("Continue");
	if ((countitem(1019) > 29) && (countitem(999) > 9) && (countitem(1011) > 9) && (countitem(984) > 4)) {
	mes "^3355FFYou will need Trunks to";
	mes "repair the support frame,";
	mes "Oridecon to enhance the";
	mes "gate's endurance, and";
	mes "Emveretarcon to basically";
	mes "hold everything together.^000000";
	next;
	set .@ro_of01,rand(10,15);
	while( 1 )
	{
		if( .@ro_of02 == .@ro_of01 )
		{
			break;
		}
		else
		{
			switch( rand(1,4) )
			{
				case 1:
					mes "^3355FFThe support frame";
					mes "is badly damaged:";
					mes "fixing this part";
					mes "is a top priority.^000000";
					next;
					switch( select("Trunk:Steel:Emveretarcon:Oridecon") )
					{
						case 1:
							mes "^3355FFThe frame has been";
							mes "reinforced with wood.^000000";
							set .@rp_temp,.@rp_temp + 1;
							set .@ro_of02,.@ro_of02 + 1;
							specialeffect2 EF_REPAIRWEAPON;
							next;
							break;
						case 2:
							mes "^3355FFYou tried using steel,";
							mes "but it's not working very";
							mes "well. You'll have to try";
							mes "something else.^000000";
							close;
						case 3:
							mes "^3355FFYou tried using emveretarcon";
							mes "to reinforce the gate, but it's";
							mes "not working well at all.";
							mes "You'll have to start over.^000000";
							close;
						case 4:
							mes "^3355FFYou tried using oridecon,";
							mes "but it's not working very";
							mes "well. You'll have to try";
							mes "something else.^000000";
							close;
					}
					break;
				case 2:
					mes "^3355FFIt looks like the gate's";
					mes "overall endurance needs to";
					mes "be reinforced with something.^000000";
					next;
					switch( select("Trunk:Steel:Emveretarcon:Oridecon") )
					{
						case 1:
							mes "^3355FFYou tried using wood";
							mes "to reinforce the gate.^000000";
							set .@ro_of02,.@ro_of02 + 1;
							next;
							break;
						case 2:
							mes "^3355FFYou tried using steel";
							mes "to reinforce the gate, but";
							mes "it's not working well at all.";
							mes "You'll have to start over.^000000";
							close;
						case 3:
							mes "^3355FFYou tried using emveretarcon";
							mes "to reinforce the gate, but it's";
							mes "not working well at all.";
							mes "You'll have to start over.^000000";
							close;
						case 4:
							mes "^3355FFYou hammered the";
							mes "oridecon: it looks";
							mes "like this will work.^000000";
							set .@rp_temp,.@rp_temp + 1;
							set .@ro_of02,.@ro_of02 + 1;
							specialeffect2 EF_REPAIRWEAPON;
							next;
							break;
					}
					break;
				case 3:
					mes "^3355FFThe damage to the gate";
					mes "has caused all these";
					mes "cracks. You'll have to";
					mes "weld them solid somehow.^000000";
					next;
					switch( select("Trunk:Steel:Emveretarcon:Oridecon") )
					{
						case 1:
							mes "^3355FFYou tried using wood to fix";
							mes "this problem, but it seems";
							mes "to have made it worse.";
							mes "You'll have to start all over.^000000";
							close;
						case 2:
							mes "^3355FFYou used steel to weld";
							mes "all the cracks: the gate is";
							mes "is starting to look more solid.^000000";
							set .@rp_temp,.@rp_temp + 1;
							set .@ro_of02,.@ro_of02 + 1;
							specialeffect2 EF_REPAIRWEAPON;
							next;
							break;
						case 3:
							mes "^3355FFYou tried using emveretarcon";
							mes "to reinforce the gate, but it's";
							mes "not working well at all.";
							mes "You'll have to start over.^000000";
							close;
						case 4:
							mes "^3355FFYou tried using oridecon,";
							mes "but it's not working very";
							mes "well. You'll have to try";
							mes "something else.^000000";
							close;
					}
					break;
				case 4:
					mes "^3355FFNow you need to make";
					mes "sure that the gate is held";
					mes "together pretty solidly.^000000";
					next;
					switch( select("Trunk:Steel:Emveretarcon:Oridecon") )
					{
						case 1:
							mes "^3355FFYou tried using wood to fix";
							mes "this problem, but it seems";
							mes "to have made it worse.";
							mes "You'll have to start all over.^000000";
							close;
						case 2:
							mes "^3355FFYou tried using steel,";
							mes "but it's not working very";
							mes "well. You'll have to try";
							mes "something else.^000000";
							close;
						case 3:
							mes "^3355FFYou successfully used";
							mes "the emveretarcon to repair";
							mes "much of the gate's damage.^000000";
							set .@rp_temp,.@rp_temp + 1;
							set .@ro_of02,.@ro_of02 + 1;
							specialeffect2 EF_REPAIRWEAPON;
							next;
							break;
						case 4:
							mes "^3355FFYou tried using oridecon,";
							mes "but it's not working very";
							mes "well. You'll have to try";
							mes "something else.^000000";
							close;
					}
			}
		}
	}
	}
	else {
	mes "^3355FFYou can't attempt to repair";
	mes "the Fortress Gate if you don't";
	mes "have all the needed materials.^000000";
	close;
	}	

	mes "^3355FFWell, it looks like";
	mes "you're just about done";
	mes "with repairing the gate.^000000";
	next;
	if( .@rp_temp == .@ro_of01 )
	{
		mes "^3355FFThe Fortress Gate has";
		mes "been successfully repaired!^000000";
		//delitem 1019,30; //Wooden_Block
		//delitem 999,10; //Steel
		//delitem 1011,10; //Emveretarcon
		//delitem 984,5; //Oridecon
		close2;
		return;
	}
	else
	{
		mes "^3355FFThe wall has been breached,";
		mes "and the attempt to repair the";
		mes "Fortress Gate has failed.";
		mes "You lost some of your";
		mes "repair resources...^000000";
		//delitem 984,2; //Oridecon
		//delitem 999,4; //Steel
		//delitem 1019,14; //Wooden_Block
		//delitem 1011,3; //Emveretarcon
		close;
	}
}

pvp_n_5-5,99,127,1	script	Barricade_1	10962,{}
pvp_n_5-5,101,127,1	script	Barricade_2	10962,{}
pvp_n_5-5,99,72,1	script	Barricade_3	10962,{}
pvp_n_5-5,101,72,1	script	Barricade_4	10962,{}
pvp_n_5-5,72,100,1	script	Barricade_5	10962,{}
pvp_n_5-5,72,98,1	script	Barricade_6	10962,{}
pvp_n_5-5,127,101,1	script	Barricade_7	10962,{}
pvp_n_5-5,127,99,1	script	Barricade_8	10962,{}

quiz_02	mapflag	nosave
quiz_02	mapflag	nomemo
quiz_02	mapflag	noteleport
quiz_02	mapflag	nowarp
quiz_02	mapflag	nowarpto
quiz_02	mapflag	noreturn

pvp_n_5-5	mapflag	nosave
pvp_n_5-5	mapflag	nomemo
pvp_n_5-5	mapflag	noteleport
pvp_n_5-5	mapflag	nowarp
pvp_n_5-5	mapflag	nowarpto
pvp_n_5-5	mapflag	noreturn
pvp_n_5-5	mapflag	pvp	off